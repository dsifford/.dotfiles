#!/bin/bash

# Change back to xterm for now until urxvt is installed
TERM='xterm'

case $1 in
    'init')
        # Initialize golang directory
        mkdir -p $HOME/gocode/{bin,pkg,src/github.com/dsifford}

        # Initialize repos directory
        mkdir -p $HOME/repos
        ;;
    'pacman')
        pacman --noconfirm -Syu
        pacman --noconfirm --needed -S yaourt

        # Set "pc_flag" according to hostname
        [[ $(uname -n) == "desktop" ]] && pc_flag="$" || pc_flag="@"

        # Install all pacman packages from pacman list if they
        # aren't yet installed or if they're outdated
        while IFS='' read -r line || [[ -n $line ]]; do
            if [[ ${line:0:1} =~ (\$|@) ]]; then
                if [[ ${line:0:1} != $pc_flag ]]; then
                    continue
                fi
                clear
                echo '#################################################################'
                echo '##                                                             ##'
                echo '##                           PACMAN                            ##'
                echo '##                                                             ##'
                echo '#################################################################'
                printf "\n\n===> Installing package %s...\n\n\n\n\n\n\n\n\n\n\n\n" "$line"
                sleep 1
                pacman --noconfirm --needed -S ${line:1}
                continue
            fi
            clear
            echo '#################################################################'
            echo '##                                                             ##'
            echo '##                           PACMAN                            ##'
            echo '##                                                             ##'
            echo '#################################################################'
            printf "\n\n===> Installing package %s...\n\n\n\n\n\n\n\n\n\n\n\n" "$line"
            sleep 1
            pacman --noconfirm --needed -S $line
        done < "packages/pacman"

        # Run through the package list again to make sure all packages installed corretly
        non_installed=''
        while IFS='' read -r line || [[ -n $line ]]; do
            if [[ ${line:0:1} =~ (\$|@) ]]; then
                continue
            fi
            if [[ $(pacman -Qsq $line) == '' ]]; then
                non_installed="$non_installed $line"
            fi
        done < "packages/pacman"
        [[ $non_installed != '' ]] && \
            printf "\n\nERROR: The following pacages were not installed:\n\n %s\n\n" "$non_installed" && \
            exit 0

        HOME='/home/dsifford'

        # Install known python script dependencies
        pip2 install -I ouimeaux phue

        ;;
    'yaourt')

        if [[ $EUID == 0 ]]; then
            printf "Don't run this with sudo\n"
            exit 0
        fi

        # Update packages/package list
        pacman --noconfirm -Syu
        pacman --noconfirm --needed -S yaourt
        yaourt --noconfirm -Syu

        # Set "pc_flag" according to hostname
        [[ $(uname -n) == "desktop" ]] && pc_flag="$" || pc_flag="@"

        # Install all yaourt packages from yaourt list if they aren't
        # yet installed or if they're outdated
        while IFS='' read -r line || [[ -n $line ]]; do
            clear
            echo '#################################################################'
            echo '##                                                             ##'
            echo '##                           YAOURT                            ##'
            echo '##                                                             ##'
            echo '#################################################################'
            printf "\n\n===> Installing package %s...\n\n\n\n\n\n\n\n\n\n\n\n" "$line"
            sleep 1
            yaourt --needed -S $line
        done < "packages/yaourt"

        # Run through the package list again to make sure all packages installed corretly
        non_installed=''
        while IFS='' read -r line || [[ -n $line ]]; do
            if [[ ${line:0:1} =~ (\$|@) ]]; then
                continue
            fi
            if [[ $(yaourt -Qsq $line) == '' ]]; then
                non_installed="$non_installed $line"
            fi
        done < "packages/yaourt"
        [[ $non_installed != '' ]] && \
            printf "\n\nERROR: The following pacages were not installed:\n\n %s\n\n" "$non_installed" && \
            exit 0
        ;;

    *)
        printf 'Commands must be one of:\n1)\tinit\n2)\tpacman\n3)\tyaourt\n'
esac
