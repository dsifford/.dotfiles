#!/usr/bin/env python3
"""
Daemon script that makes Chrome "Picture-in-picture" windows move to active
window and away from the mouse.
"""
from dataclasses import dataclass
from os import environ

from i3ipc import Con, Connection
from Xlib import display

FLOATING_NAME = "Picture-in-Picture"
FLOATING_MARK = "FLOATING_ACTIVE"
CROSS_MARK = "CROSS"


@dataclass
class Padding:
    TOP: int = 0
    RIGHT: int = 0
    BOTTOM: int = 0
    LEFT: int = 0


class Positioner:
    padding: Padding

    def __init__(self, i3: Connection):
        last_active = next(
            (
                w.window_class
                for w in i3.get_tree().find_focused().workspace().descendants()
                if w.window_class is not None and w.window_title is not FLOATING_NAME
            ),
            None,
        )
        if last_active == "firefoxdeveloperedition":
            self.padding = Padding(TOP=150, RIGHT=25)
        elif last_active == "Termite":
            self.padding = Padding(BOTTOM=50)
        else:
            self.padding = Padding()

    def get_x(self, output_rect, rect, cross=False) -> int:
        left_value = output_rect.x + self.padding.LEFT
        right_value = (output_rect.x + output_rect.width) - (
            rect.width + self.padding.RIGHT
        )
        on_left = output_rect.x + (output_rect.width / 2) > rect.x + (rect.width / 2)
        if on_left:
            return left_value if not cross else right_value
        return right_value if not cross else left_value

    def get_y(self, output_rect, rect) -> int:
        on_top = rect.y + (rect.height / 2) > output_rect.y + (output_rect.height / 2)
        if on_top:
            return output_rect.y + self.padding.TOP
        return output_rect.y + output_rect.height - rect.height - self.padding.BOTTOM


def mouse_is_hovered(rect) -> bool:
    mouse = display.Display().screen().root.query_pointer()._data
    mouse_x, mouse_y = mouse["root_x"], mouse["root_y"]
    return (rect.x <= mouse_x <= rect.x + rect.width) and (
        rect.y <= mouse_y <= rect.y + rect.height
    )


def translate_window(i3: Connection, window, cross=False) -> None:
    workspace = i3.get_tree().find_focused().workspace()
    if workspace is not None:
        positioner = Positioner(i3)
        window.command(
            (
                "move position"
                f" {positioner.get_x(workspace.rect, window.rect, cross)}"
                f" {positioner.get_y(workspace.rect, window.rect)};"
                " focus tiling"
            )
        )


def on_window_focus(i3: Connection, e) -> None:
    pip_window = next(iter(i3.get_tree().find_named(FLOATING_NAME)), None)
    if (
        pip_window is None
        or FLOATING_MARK not in pip_window.marks
        or pip_window.id != e.container.id
        or not mouse_is_hovered(e.container.rect)
    ):
        return
    pip_window.command(f"mark --add --toggle {CROSS_MARK}")
    cross = CROSS_MARK in pip_window.marks
    translate_window(i3, pip_window, cross=cross)


# i3sock is being set incorrectly somewhere this forces i3ipc to look it up
del environ["I3SOCK"]

con = Connection()
con.on("window::focus", on_window_focus)
con.main()

# vim: set fdn=1:
