#!/usr/bin/env python3
# pylint: disable=invalid-name
import argparse
from contextlib import suppress
from typing import Union

import i3ipc

FLOATING_MODES = ["auto_on", "user_on"]


def main():
    args = parse_args()
    i3 = i3ipc.Connection()
    focused = i3.get_tree().find_focused()
    focused_container = focused if focused.type == "con" else None
    focused_workspace = focused.workspace()

    if focused.floating in FLOATING_MODES:
        exit()

    if focused_container:
        with suppress(AttributeError):
            i3.command(
                try_adjacent_container(
                    focused_container,
                    [
                        i
                        for i in focused_container.workspace().leaves()
                        if i.floating not in FLOATING_MODES
                    ],
                    args.prev,
                )
            ) and exit()

    with suppress(AttributeError):
        i3.command(
            try_adjacent_workspace(
                focused_workspace, i3.get_tree().workspaces(), args.prev
            )
        )


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-p", "--prev", help="Focus the previous workspace", action="store_true"
    )
    return parser.parse_args()


def try_adjacent_container(
    focused_container, containers: list, prev: bool
) -> Union[str, None]:
    curr_idx = next(
        (
            i
            for [i, container] in enumerate(containers)
            if container.id == focused_container.id
        ),
        None,
    )
    if curr_idx is None:
        return None
    elif prev and curr_idx > 0:
        return "focus left"
    elif not prev and len(containers) - 1 >= curr_idx + 1:
        return "focus right"
    return None


def try_adjacent_workspace(
    focused_workspace, workspaces: list, prev: bool
) -> Union[str, None]:
    curr_idx = next(
        (i for [i, ws] in enumerate(workspaces) if ws.name == focused_workspace.name),
        None,
    )
    if curr_idx is None:
        return None

    if prev:
        i = curr_idx - 1 if curr_idx > 0 else -1
        container = [
            l for l in workspaces[i].leaves() if l.floating not in FLOATING_MODES
        ][-1]
    else:
        i = curr_idx + 1 if curr_idx < len(workspaces) - 1 else 0
        container = [
            l for l in workspaces[i].leaves() if l.floating not in FLOATING_MODES
        ][0]

    return f'[con_id="{container.id}"] focus'


if __name__ == "__main__":
    main()
